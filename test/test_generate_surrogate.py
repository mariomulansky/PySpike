import numpy as np
from numpy.testing import assert_equal, assert_almost_equal, assert_array_equal, assert_array_almost_equal
import random
import pytest
from unittest.mock import patch
from pyspike.generate_surrogate import generate_surro, Spike_Order_surro
from pyspike.spike_order import _optimal_spike_train_sorting_from_matrix

@pytest.fixture(autouse=True)
def set_seed():
    random.seed(42)

def mock_spike_order_surro(indies1, firsts, seconds, num_swaps):
    print(f"Mock Spike_Order_surro called with randint: 0")
    return indies1, 0

def mock_randint():
    print(f"Mock number2 Spike_Order_surro called with randint: 0")
    return 0

random_val = [22, 97, 17, 117, 117, 105, 67, 63, 75, 36, 37, 108, 121, 36, 121, 122, 26, 129, 39] * (200)

def mock_randint_surro(min_val, max_val):
    return random_val.pop(0)

def test_generate_surro():
    sto_profs = np.array([[ 1.,  1.,  0.,  0.,  0.,  0.,  1.,  1.,  0.],
                          [ 1.,  0.,  1.,  1.,  1., -1., -1.,  0.,  0.],
                          [ 0.,  1.,  1.,  0.,  0., -1.,  0., -1.,  0.]])

    with patch('pyspike.generate_surrogate.Spike_Order_surro', side_effect=mock_spike_order_surro):
        result = generate_surro(sto_profs, 1)

    expected_result = np.array([0.3333])

    assert_array_almost_equal(result, expected_result, decimal=4)

    sto_profs = np.array([[ 1.,  1.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0., -1.,  0., 1.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0., -1., -1., 0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0., -1., -1.], [ 1.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0., -1.,  0., 1.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0., -1.,  0.,  0.,  0., -1.,  0., -1., 0.,  0.,  0., -1.,  0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0., -1.,  0., -1.], [ 1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1., -1.,  0., 1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0., -1.,  0.,  0., -1., 0.,  0., -1.,  0.,  0., -1.,  0.,  0., -1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.], [ 1.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0., -1.,  0., 1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0., -1.,  0., -1.,  0.,  0.,  0., -1., 0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0., -1.], [ 1.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  1., 1.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0., -1.], [ 0.,  1.,  1.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  0.,  0., 0.,  0.,  0., -1.,  0., -1.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1., -1.,  0., 0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0., -1., -1.,  0.], [ 0.,  1.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0., 0.,  0.,  0.,  0., -1., -1.,  1.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0., -1.,  0., 0.,  0., -1.,  0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.], [ 0.,  1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  1.,  1.,  0.,  0.,  0.,  0., 0., -1.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0., -1.,  0., 0., -1.,  0.,  0., -1.,  0.,  0., -1.,  0.,  0., -1.,  0.,  0., -1.,  0., -1.,  0.], [ 0.,  1.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  0.,  0.,  1.,  1.,  0.,  0.,  0.,  0.,  1., 0.,  0., -1.,  0.,  0., -1.,  1.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0., -1.,  0.], [ 0.,  0.,  1.,  1.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  0., 0.,  0.,  0.,  1.,  1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  0., -1., -1.,  0.,  0., 0.,  0., -1., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.], [ 0.,  0.,  1.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  0., -1., -1.,  0.,  0.,  0., 0., -1.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0., 0., -1.,  0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0.,  0., -1., -1.,  0.,  0.], [ 0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  1., 0.,  0., -1., -1.,  0.,  0.,  0.,  1.,  1.,  0.,  0.,  0., -1.,  0.,  0., -1.,  0.,  0., -1.,  0.,  0., -1.,  0.,  0., -1.,  0.,  0., -1.,  0.,  0., -1.,  0., -1.,  0.,  0.], [ 0.,  0.,  0.,  1.,  1.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  0., -1.,  0., -1.,  0.,  0., 0., -1.,  0.,  0., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0., -1., -1.,  0.,  0.,  0., 0., -1., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.], [ 0.,  0.,  0.,  1.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  1., 0.,  0., -1.,  0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0., -1.,  0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.], [ 0.,  0.,  0.,  0.,  1.,  1.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  1.,  0.,  0.,  0.,  1., 0.,  1.,  1.,  0.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.]])
    num_surros = 19
    
    with patch('pyspike.generate_surrogate.Spike_Order_surro', wraps=Spike_Order_surro):
        with patch('pyspike.generate_surrogate.random.randint', side_effect=mock_randint_surro):
            result = generate_surro(sto_profs, num_surros)

    expected_result = np.array([0.1962, 0.2566, 0.3623, 0.1962, 0.1962, 0.317 , 0.166 , 0.2113, 0.2717, 0.1509, 0.1962, 0.2717, 0.2264, 0.2566, 0.317 , 0.1962, 0.2415, 0.2868, 0.1811]) ##### need to check if it's correct

    assert_array_almost_equal(result, expected_result, decimal=4)

def test_Spike_Order_surro():
    indies1 = np.array([[0, 0, 1, 1, 1, 2, 2],
                        [0, 0, 0, 0, 2, 1, 2],
                        [1, 1, 2, 2, 0, 2, 1],
                        [0, 6, 0, 3, 5, 1, 5],
                        [1, 7, 2, 4, 6, 2, 7]])
    firsts = np.array([0, 0, 1])
    seconds = np.array([1, 2, 2])
    num_swaps = 1
    with patch('pyspike.generate_surrogate.np.random.rand', side_effect=mock_randint):
        result, error_count = Spike_Order_surro(indies1, firsts, seconds, num_swaps)

    expected_result = indies1
    expected_error_count = 0

    assert_array_equal(result, expected_result)
    assert error_count == expected_error_count

    indies1 = np.array([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  
                          3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14],
                        [ 0,  0,  1,  0,  1,  1,  1,  1,  1,  0,  0,  2,  0,  2,  2,  2,  2,  2,  0,  0,  3,  0,  3,  3,
                          3,  3,  0,  0,  4,  0,  4,  4,  4,  4,  4,  0,  0,  0,  0,  5,  5,  5,  5,  5,  1,  1,  1,  2,
                          1,  2,  2,  2,  2,  1,  1,  1,  3,  1,  3,  3,  3,  1,  1,  1,  4,  1,  4,  4,  4,  4,  1,  1,
                          1,  5,  1,  5,  5,  5,  5,  2,  2,  2,  2,  2,  3,  3,  3,  2,  2,  4,  4,  2,  4,  4,  4,  4,
                          2,  2,  2,  5,  2,  5,  5,  5,  5,  3,  3,  4,  4,  4,  4,  4,  4,  3,  3,  3,  5,  5,  5,  5,
                          5,  4,  4,  4,  4,  5,  5,  5,  5,  5],
                        [ 1,  1,  0,  1,  0,  0,  0,  0,  0,  2,  2,  0,  2,  0,  0,  0,  0,  0,  3,  3,  0,  3,  0,  0,
                          0,  0,  4,  4,  0,  4,  0,  0,  0,  0,  0,  5,  5,  5,  5,  0,  0,  0,  0,  0,  2,  2,  2,  1,
                          2,  1,  1,  1,  1,  3,  3,  3,  1,  3,  1,  1,  1,  4,  4,  4,  1,  4,  1,  1,  1,  1,  5,  5,
                          5,  1,  5,  1,  1,  1,  1,  3,  3,  3,  3,  3,  2,  2,  2,  4,  4,  2,  2,  4,  2,  2,  2,  2,
                          5,  5,  5,  2,  5,  2,  2,  2,  2,  4,  4,  3,  3,  3,  3,  3,  3,  5,  5,  5,  3,  3,  3,  3,
                          3,  5,  5,  5,  5,  4,  4,  4,  4,  4],
                        [ 0,  6, 12, 18, 24, 34, 40, 46, 51,  0,  6, 14, 18, 25, 33, 39, 45, 50,  0,  6, 15, 18, 28, 32,
                         38, 44,  0,  6, 13, 18, 27, 31, 37, 43, 49,  0,  6, 16, 18, 26, 30, 36, 42, 48,  1,  7, 12, 21,
                         24, 33, 39, 45, 50,  1,  7, 12, 22, 24, 32, 38, 44,  1,  7, 12, 19, 24, 31, 37, 43, 49,  1,  7,
                         12, 20, 24, 30, 36, 42, 48,  2,  8, 14, 21, 25, 32, 38, 44,  2,  8, 13, 19, 25, 31, 37, 43, 49,
                         2,  8, 14, 20, 25, 30, 36, 42, 48,  3,  9, 13, 19, 27, 31, 37, 43,  3,  9, 15, 20, 26, 30, 36,
                         42,  4, 10, 13, 19, 26, 30, 36, 42, 48],
                        [ 1,  7, 16, 23, 29, 35, 41, 47, 52,  2,  8, 16, 21, 29, 35, 41, 47, 52,  3,  9, 16, 22, 29, 35,
                         41, 47,  4, 10, 16, 19, 29, 35, 41, 47, 52,  5, 11, 17, 20, 29, 35, 41, 47, 52,  2,  8, 14, 23,
                         25, 34, 40, 46, 51,  3,  9, 15, 23, 28, 34, 40, 46,  4, 10, 13, 23, 27, 34, 40, 46, 51,  5, 11,
                         17, 23, 26, 34, 40, 46, 51,  3,  9, 15, 22, 28, 33, 39, 45,  4, 10, 14, 21, 27, 33, 39, 45, 50,
                         5, 11, 17, 21, 26, 33, 39, 45, 50,  4, 10, 15, 22, 28, 32, 38, 44,  5, 11, 17, 22, 28, 32, 38,
                         44,  5, 11, 17, 20, 27, 31, 37, 43, 49]])
    firsts = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4])
    seconds = np.array([1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5])
    num_swaps = 1

    with patch('pyspike.generate_surrogate.np.random.rand', side_effect=mock_randint):
        result, error_count = Spike_Order_surro(indies1, firsts, seconds, num_swaps)
    """
    expected_result = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 2, 2, 2, 2, 2, 2, 2, 7, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 4, 4, 4, 4, 4, 4, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 6, 6, 6, 3, 7, 7, 7, 7, 7, 7, 7, 7, 4, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14],
    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 2, 0, 2, 2, 2, 2, 2, 1, 0, 3, 0, 3, 3, 3, 3, 1, 0, 4, 0, 4, 4, 4, 4, 4, 1, 0, 0, 0, 5, 5, 5, 5, 5, 0, 1, 1, 2, 1, 2, 2, 2, 2, 0, 1, 1, 3, 1, 3, 3, 3, 0, 1, 1, 4, 1, 4, 4, 4, 4, 0, 1, 1, 5, 1, 5, 5, 5, 5, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 4, 4, 2, 4, 4, 4, 4, 2, 2, 2, 5, 2, 5, 5, 5, 5, 3, 3, 4, 4, 4, 4, 4, 4, 3, 3, 3, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5],
    [0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 3, 3, 0, 3, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 1, 1, 1, 1, 3, 3, 3, 1, 3, 1, 1, 1, 4, 4, 4, 1, 4, 1, 1, 1, 1, 5, 5, 5, 1, 5, 1, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 4, 4, 2, 2, 4, 2, 2, 2, 2, 5, 5, 5, 2, 5, 2, 2, 2, 2, 4, 4, 3, 3, 3, 3, 3, 3, 5, 5, 5, 3, 3, 3, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 4],
    [0, 6, 12, 18, 24, 34, 40, 46, 51, 0, 6, 14, 18, 25, 33, 39, 45, 50, 0, 6, 15, 18, 28, 32, 38, 44, 0, 6, 13, 18, 27, 31, 37, 43, 49, 0, 6, 16, 18, 26, 30, 36, 42, 48, 1, 7, 12, 21, 24, 33, 39, 45, 50, 1, 7, 12, 22, 24, 32, 38, 44, 1, 7, 12, 19, 24, 31, 37, 43, 49, 1, 7, 12, 20, 24, 30, 36, 42, 48, 2, 8, 14, 21, 25, 32, 38, 44, 2, 8, 13, 19, 25, 31, 37, 43, 49, 2, 8, 14, 20, 25, 30, 36, 42, 48, 3, 9, 13, 19, 27, 31, 37, 43, 3, 9, 15, 20, 26, 30, 36, 42, 4, 10, 13, 19, 26, 30, 36, 42, 48],
    [1, 7, 16, 23, 29, 35, 41, 47, 52, 2, 8, 16, 21, 29, 35, 41, 47, 52, 3, 9, 16, 22, 29, 35, 41, 47, 4, 10, 16, 19, 29, 35, 41, 47, 52, 5, 11, 17, 20, 29, 35, 41, 47, 52, 2, 8, 14, 23, 25, 34, 40, 46, 51, 3, 9, 15, 23, 28, 34, 40, 46, 4, 10, 13, 23, 27, 34, 40, 46, 51, 5, 11, 17, 23, 26, 34, 40, 46, 51, 3, 9, 15, 22, 28, 33, 39, 45, 4, 10, 14, 21, 27, 33, 39, 45, 50, 5, 11, 17, 21, 26, 33, 39, 45, 50, 4, 10, 15, 22, 28, 32, 38, 44, 5, 11, 17, 22, 28, 32, 38, 44, 5, 11, 17, 20, 27, 31, 37, 43, 49]])
    """
    expected_result = np.array([
        [0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 1, 10, 1, 1, 1, 1, 1, 1, 2, 2, 12, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 14, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 0, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 1, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 2, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 4, 14, 14, 14, 14, 14, 14],
        [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 0, 3, 0, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 0, 5, 5, 5, 5, 5, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 3, 1, 3, 3, 3, 1, 1, 1, 4, 1, 4, 4, 4, 4, 1, 1, 1, 5, 1, 5, 5, 5, 5, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 0, 4, 2, 4, 4, 4, 4, 2, 2, 2, 5, 2, 5, 5, 5, 5, 3, 3, 0, 4, 4, 4, 4, 4, 3, 3, 3, 5, 5, 5, 5, 5, 4, 4, 0, 4, 5, 5, 5, 5, 5],
        [1, 1, 4, 1, 0, 0, 0, 0, 0, 2, 2, 4, 2, 0, 0, 0, 0, 0, 3, 3, 4, 3, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 1, 1, 1, 1, 3, 3, 3, 1, 3, 1, 1, 1, 4, 4, 0, 1, 4, 1, 1, 1, 1, 5, 5, 5, 1, 5, 1, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 4, 4, 2, 2, 4, 2, 2, 2, 2, 5, 5, 5, 2, 5, 2, 2, 2, 2, 4, 4, 3, 3, 3, 3, 3, 3, 5, 5, 5, 3, 3, 3, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 4],
        [0, 6, 12, 18, 24, 34, 40, 46, 51, 0, 6, 14, 18, 25, 33, 39, 45, 50, 0, 6, 15, 18, 28, 32, 38, 44, 0, 6, 13, 18, 27, 31, 37, 43, 49, 0, 6, 16, 18, 26, 30, 36, 42, 48, 1, 7, 12, 21, 24, 33, 39, 45, 50, 1, 7, 12, 22, 24, 32, 38, 44, 1, 7, 12, 19, 24, 31, 37, 43, 49, 1, 7, 12, 20, 24, 30, 36, 42, 48, 2, 8, 14, 21, 25, 32, 38, 44, 2, 8, 13, 19, 25, 31, 37, 43, 49, 2, 8, 14, 20, 25, 30, 36, 42, 48, 3, 9, 13, 19, 27, 31, 37, 43, 3, 9, 15, 20, 26, 30, 36, 42, 4, 10, 13, 19, 26, 30, 36, 42, 48],
        [1, 7, 16, 23, 29, 35, 41, 47, 52, 2, 8, 16, 21, 29, 35, 41, 47, 52, 3, 9, 16, 22, 29, 35, 41, 47, 4, 10, 16, 19, 29, 35, 41, 47, 52, 5, 11, 17, 20, 29, 35, 41, 47, 52, 2, 8, 14, 23, 25, 34, 40, 46, 51, 3, 9, 15, 23, 28, 34, 40, 46, 4, 10, 13, 23, 27, 34, 40, 46, 51, 5, 11, 17, 23, 26, 34, 40, 46, 51, 3, 9, 15, 22, 28, 33, 39, 45, 4, 10, 14, 21, 27, 33, 39, 45, 50, 5, 11, 17, 21, 26, 33, 39, 45, 50, 4, 10, 15, 22, 28, 32, 38, 44, 5, 11, 17, 22, 28, 32, 38, 44, 5, 11, 17, 20, 27, 31, 37, 43, 49]])
    expected_error_count = 0

    assert_array_equal(result, expected_result) ##### need check if it's correct 
    assert error_count == expected_error_count

def test_optimal_spike_train_sorting_from_matrix():
    D = np.array([[0., 2., 1.],
                  [-2., 0., 0.],
                  [-1., 0., 0.]])
    result_p, result_A, _ = _optimal_spike_train_sorting_from_matrix(D, full_output=True)

    expected_p = np.array([0, 1, 2])
    expected_A = 3

    assert_array_equal(result_p, expected_p)
    assert result_A == expected_A

    D = np.array([[ 0., -3., -3., -2., -3., -1.],
                  [ 3.,  0., -1.,  0., -1., -1.],
                  [ 3.,  1.,  0.,  2., -3., -1.],
                  [ 2., -0., -2.,  0., -4., -2.],
                  [ 3.,  1.,  3.,  4.,  0., -1.],
                  [ 1.,  1.,  1.,  2.,  1., 0.]])
    
    result_p, result_A, _ = _optimal_spike_train_sorting_from_matrix(D, full_output=True)

    expected_p = np.array([5, 4, 2, 3, 1, 0])
    expected_A = 28

    assert result_A == expected_A 
    assert_array_equal(result_p, expected_p)

    